<!DOCTYPE html>
<html>
<head>
    <title>Parasitic Combination Inheritance Example</title>
    <script type="text/javascript">
        
        /**
         * 最理想的继承模式；
         * **/
        function object(o){
            function F(){}
            F.prototype = o;
            return new F();
        }
    
        // 寄生组合继承： 通过构造柱函数来继承属性，通过原型链的混成形式来继承方法。
        function inheritPrototype(subType, superType){
            var prototype = object(superType.prototype); //create object 创建 超类型原型的一个副本；
            prototype.constructor = subType; //augment object 增强对象，为副本添加 constructor 属性，从而弥补因重写原型而失去的默认的constructor属性；
            subType.prototype = prototype; //assign object 指定对象，将创建对象（副本）赋值给子类型的原型；
            console.log('subType:',subType);
        }
                                
        function SuperType(name){
            this.name = name;
            this.colors = ["red", "blue", "green"];
        }
        
        SuperType.prototype.sayName = function(){
            console.log(this.name);
        };

        function SubType(name, age){  
            SuperType.call(this, name);
            
            this.age = age;
        }

        /**
         * 这里与 6.3.1_01_组合继承 中不一样的地方；
         * 在 6.3.1_01_组合继承中 使用的方式是  SubType.prototype = new SuperType();
         * 
         * **/
        inheritPrototype(SubType, SuperType);
        
        SubType.prototype.sayAge = function(){
            console.log(this.age);
        };
        
        var instance1 = new SubType("Nicholas", 29);
        instance1.colors.push("black");
        console.log(instance1.colors);  //"red,blue,green,black"
        instance1.sayName();      //"Nicholas";
        instance1.sayAge();       //29
        
       
        var instance2 = new SubType("Greg", 27);
        console.log(instance2.colors);  //"red,blue,green"
        instance2.sayName();      //"Greg";
        instance2.sayAge();       //27
       
        
    </script>
</head>
<body>

</body>
</html>