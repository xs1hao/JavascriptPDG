<!DOCTYPE html>
<html>
<head>
    <title>Prototype Chaining Example 4</title>
    <script type="text/javascript">

        /**
         * 问题：
         * 1、引用类型的原型，造成实例之间的原型属性共享；
         * 2、在创建子类实例时，不能像超类型的构造函数传递参数；
         * ===>> 在实践中很少使用原型链；
         * **/
        function Animal(){
            this.colors = ["red", "blue", "green"]; // Animal 中的一个 引用类型值 colors;
        }

        function Person(){            
        }
        
        //inherit from Animal
        // 通过原型实现继承，原型实际上会变成另一个类型的实例；
        // Animal.prototype 成了 Person的实例 ；
        Person.prototype = new Animal();

        var instance1 = new Person();
        instance1.colors.push("black");
        alert(instance1.colors);    //"red,blue,green,black"
        
        // 原先的实例属性成了 instance2 的原型属性；
        var instance2 = new Person();
        alert(instance2.colors);    //"red,blue,green,black"
        
        
    </script>
</head>
<body>

</body>
</html>